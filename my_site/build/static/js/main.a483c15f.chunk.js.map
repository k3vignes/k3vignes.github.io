{"version":3,"sources":["components/NavBar/NavBar.tsx","components/Parallax/Parallax.tsx","components/Card/Card.tsx","components/Home/Home.tsx","components/AboutMe/AboutMe.tsx","components/Contact/Contact.tsx","components/Footer/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MyNavbar","React","useState","navbarClass","displayPlaceholder","navbarState","setNavbarState","useEffect","updateNavbarClass","document","documentElement","scrollTop","window","innerHeight","body","addEventListener","removeEventListener","className","Navbar","bg","variant","Nav","NavItem","NavLink","href","target","NavDropdown","id","title","Item","Parallax","props","cssClass","headerText","Card","description","Home","AboutMe","Contact","Footer","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+WAeaA,G,MAAqB,WAAO,IAAD,EACAC,IAAMC,SAAiB,CAC3DC,YAAa,kBACbC,oBAAoB,IAHgB,mBAC/BC,EAD+B,KAClBC,EADkB,KA0BtC,OApBAC,qBAAU,WACR,IAAMC,EAAoB,WAEtBC,SAASC,gBAAgBC,UAAYC,OAAOC,aAC5CJ,SAASK,KAAKH,UAAYC,OAAOC,YAEjCP,EAAe,CAACH,YAAa,eAAgBC,oBAAoB,KAEjEK,SAASC,gBAAgBC,UAAYC,OAAOC,aAC5CJ,SAASK,KAAKH,UAAYC,OAAOC,cAEjCP,EAAe,CAACH,YAAa,kBAAmBC,oBAAoB,KAIxE,OADAQ,OAAOG,iBAAiB,SAAUP,GAC3B,WACLI,OAAOI,oBAAoB,SAAUR,OAKvC,oCACI,yBAAKS,UAAWZ,EAAYF,aAC1B,kBAACe,EAAA,EAAD,CAAQC,GAAI,OAAQC,QAAS,QAC3B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASC,KAAM,yDAA0DC,OAAQ,UAAjF,aAIF,kBAACH,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASC,KAAM,8BAA+BC,OAAQ,UAAtD,WAEF,kBAACH,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASC,KAAM,eAAgBC,OAAQ,UAAvC,WAEF,kBAACC,EAAA,EAAD,CAAaC,GAAI,YAAaC,MAAO,aACnC,kBAACF,EAAA,EAAYG,KAAb,CAAkBL,KAAM,gCAAiCC,OAAQ,UAAjE,aAOPpB,EAAYD,oBACX,yBAAKa,UAAW,mBC1Dba,G,MAAqC,SAAAC,GAChD,OACI,yBAAKd,UAAWc,EAAMC,UACnBD,EAAME,YACH,wBAAIhB,UAAW,eACVc,EAAME,eCLVC,G,MAA6B,SAAAH,GAExC,OACE,yBAAKd,UAAW,aACX,yBAAKA,UAAW,YACf,4BACGc,EAAMH,QAGX,yBAAKX,UAAW,aACXc,EAAMI,gBCfNC,EAAiB,WAI5B,OACE,6BACE,kBAAC,EAAD,CAAMR,MAAO,OAAQO,YAJR,gHCDNE,EAAoB,WAQ/B,OACE,6BACE,kBAAC,EAAD,CAAUL,SAAU,oBACpB,kBAAC,EAAD,CAAMJ,MAAO,WAAYO,YATZ,8jBCFNG,EAAoB,WAI/B,OACE,6BACE,kBAAC,EAAD,CAAUN,SAAU,oBACpB,kBAAC,EAAD,CAAMJ,MAAO,UAAWO,YALX,6LCHNI,G,MAAS,WACpB,OACE,yBAAKtB,UAAW,UACd,uBAAGA,UAAW,WAAd,4BCMOuB,EAAgB,WAC3B,OACE,yBAAKvB,UAAW,QACd,kBAAC,EAAD,CAAUe,SAAU,iBAAkBC,WAAY,0CAClD,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCRcQ,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtC,SAASuC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a483c15f.chunk.js","sourcesContent":["import {\n  Nav, Navbar,\n  NavItem,\n  NavLink,\n  NavDropdown\n} from \"react-bootstrap\";\nimport \"./NavBar.scss\";\nimport { Link, animateScroll as scroll } from \"react-scroll\";\nimport React, {useEffect, useState} from 'react';\n\ntype IState = {\n    navbarClass: \"fixed-header\" | \"absolute-header\",\n    displayPlaceholder: boolean,\n}\n\nexport const MyNavbar: React.FC = () => {\n  const [navbarState, setNavbarState] = React.useState<IState>({\n    navbarClass: \"absolute-header\",\n    displayPlaceholder: false,\n  });\n\n  useEffect(() => {\n    const updateNavbarClass = () => {\n      if (\n        document.documentElement.scrollTop > window.innerHeight ||\n        document.body.scrollTop > window.innerHeight\n      ) {\n        setNavbarState({navbarClass: \"fixed-header\", displayPlaceholder: true});\n      } else if (\n        document.documentElement.scrollTop < window.innerHeight ||\n        document.body.scrollTop < window.innerHeight\n      ) {\n        setNavbarState({navbarClass: \"absolute-header\", displayPlaceholder: false});\n      }\n    };\n    window.addEventListener(\"scroll\", updateNavbarClass);\n    return function cleanup() {\n      window.removeEventListener(\"scroll\", updateNavbarClass);\n    };\n  });\n\n  return (\n    <>\n        <div className={navbarState.navbarClass}>\n          <Navbar bg={\"dark\"} variant={\"dark\"}>\n            <Nav>\n              <NavItem>\n                <NavLink href={\"https://ca.linkedin.com/in/kajan-vigneswaran-292287106\"} target={\"_blank\"}>\n                  LinkedIn\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href={\"https://github.com/k3vignes\"} target={\"_blank\"}>GitHub</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href={\"./Resume.pdf\"} target={\"_blank\"}>Resume</NavLink>\n              </NavItem>\n              <NavDropdown id={\"portfolio\"} title={\"Portfolio\"}>\n                <NavDropdown.Item href={\"https://tunes-dev.appspot.com\"} target={\"_blank\"}>\n                  Tunes\n                </NavDropdown.Item>\n              </NavDropdown>\n            </Nav>\n          </Navbar>\n        </div>\n        {navbarState.displayPlaceholder && (\n          <div className={\"placeHolder\"}></div>\n        )}\n    </>\n  );\n};\n","import React from 'react';\nimport './Parallax.scss';\n\ntype IParallaxProps = {\n    cssClass: string,\n    headerText?: string,\n}\n\nexport const Parallax: React.FC<IParallaxProps> = props => {\n  return (\n      <div className={props.cssClass}>\n        {props.headerText && (\n            <h1 className={\"header-font\"}>\n                {props.headerText}\n            </h1>\n        )}\n      </div>\n  );\n};\n","import React from 'react';\nimport './Card.scss';\n\ntype ICardProps = {\n    title: string,\n    description: string,\n};\n\nexport const Card: React.FC<ICardProps> = props => {\n\n  return (\n    <div className={\"container\"}>\n         <div className={\"leftHalf\"}>\n          <h1>\n            {props.title}\n          </h1>\n        </div>\n        <div className={\"rightHalf\"}>\n            {props.description}\n        </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Card } from \"../Card/Card\";\n\nexport const Home: React.FC = () => {\n\n  const description = `If you’re looking for help on your next web development project, you’ve come to the right place`;\n\n  return (\n    <div>\n      <Card title={\"Home\"} description={description} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { Parallax } from \"../Parallax/Parallax\";\nimport { Card } from \"../Card/Card\";\n\nexport const AboutMe: React.FC = () => {\n\n  const description = `My name is Kajan Vigneswaran and I work as a Full Stack Software Engineer at a FinTech startup\n   company called Bolt. I have over 2 years of professional work experience in web development, and on the side I do\n   freelance web development work. So, if you have a project you need help with, reach out to me. I have experience\n   with a wide variety of web technologies, including but not limited to: ReactJS, PHP, Python, GoLang, WordPress,\n   and more. I’m extremely client focused and strive to deliver a product that meets my client’s expectations.`;\n\n  return (\n    <div>\n      <Parallax cssClass={\"aboutMeParallax\"} />\n      <Card title={\"About Me\"} description={description}/>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Card } from \"../Card/Card\"\nimport { Parallax } from \"../Parallax/Parallax\";\n\nexport const Contact: React.FC = () => {\n\n  const description = `If you need any help with any web development projects, feel free to send me an email at\n  kajan.vigneswaran@gmail.com with a description of the project and the technology involved.`;\n  return (\n    <div>\n      <Parallax cssClass={\"contactParallax\"} />\n      <Card title={\"Contact\"} description={description} />\n    </div>\n  );\n};\n","import React from 'react';\nimport './Footer.scss';\n\nexport const Footer = () => {\n  return (\n    <div className={\"footer\"}>\n      <p className={\"content\"}> Copyright © 2020 </p>\n    </div>\n  );\n} \n","import React from 'react';\nimport './App.scss';\nimport { MyNavbar } from \"./components/NavBar/NavBar\";\nimport Image from 'react-bootstrap/Image'\nimport logo from \"./assets/images/logo.svg\";\nimport { Parallax } from \"./components/Parallax/Parallax\";\nimport { Home } from \"./components/Home/Home\";\nimport { AboutMe } from \"./components/AboutMe/AboutMe\";\nimport { Contact } from \"./components/Contact/Contact\";\nimport { Footer } from \"./components/Footer/Footer\"; \n\n\nexport const App: React.FC = () => {\n  return (\n    <div className={\"page\"}>\n      <Parallax cssClass={\"headerParallax\"} headerText={\"Kajan Vigneswaran - Software Engineer\"} />\n      <MyNavbar />\n      <Home />\n      <AboutMe />\n      <Contact />\n      <Footer />\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}